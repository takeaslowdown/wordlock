-- take-off speed when jumping in pixel units
local jump_takeoff_speed = 400
-- these are the tweaks for the mechanics, feel free to change them for a different feeling
-- acceleration factor to use when air-borne
local air_acceleration_factor = 0.8
-- max speed right/left
local max_speed = 450
-- gravity pulling the player down in pixel units
local gravity = -200

local msg_contact_point_response = hash("contact_point_response")
local group_obstacle = hash("ground")
local input_left = hash("left")
local input_right = hash("right")
local input_jump = hash("jump")
local anim_walk = hash("walk")
local anim_idle = hash("idle")
-- local anim_cast = hash("cast")
local anim_jump = hash("jump")
local anim_fall = hash("fall")


function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("#camera", "acquire_camera_focus")
	msg.post("@render:", "use_camera_projection")

	self.velocity = vmath.vector3(0, 0, 0)
	self.facing_direction = 0
	self.correction = vmath.vector3()
	self.anim = nil
	self.jumped = false
end

local function play_animation(self, anim)
	if self.anim ~= anim then
		sprite.play_flipbook("#sprite", anim)
		self.anim = anim
	end
end

local function update_animations(self)
	sprite.set_hflip("#sprite", self.facing_direction < 0)
	if self.ground_contact then
		if self.velocity.x == 0 then
			play_animation(self, anim_idle)
		else
			play_animation(self, anim_walk)
		end
	else
		if self.velocity.y > 0 then
			play_animation(self, anim_jump)
		else
			play_animation(self, anim_fall)
		end
	end
end

function fixed_update(self, dt)
	-- apply gravity
	self.velocity.y = self.velocity.y + gravity * dt

	-- move player
	local pos = go.get_position()
	pos = pos + self.velocity * dt
	go.set_position(pos)

	-- update animations based on state (ground, air, move and idle)
	update_animations(self)

	-- reset volatile state
	self.correction = vmath.vector3()
	self.ground_contact = false
end

-- https://defold.com/manuals/physics/#resolving-kinematic-collisions
local function handle_obstacle_contact(self, normal, distance)
	if distance > 0 then
		local proj = vmath.project(self.correction, normal * distance)
		if proj < 1 then
			local comp = (distance - distance * proj) * normal
			go.set_position(go.get_position() + comp)
			self.correction = self.correction + comp
		end
	end

	if normal.y > 0.7 then
		self.ground_contact = true
		self.velocity.y = 0
	end
	if normal.y < -0.7 then
		self.velocity.y = 0
	end

	print(self.ground_contact)
end

function on_message(self, message_id, message, sender)
	if message_id == msg_contact_point_response then
		if message.group == group_obstacle then
			handle_obstacle_contact(self, message.normal, message.distance)
		end
	end
end

local function walk(self, direction)
	if direction ~= 0 then
		self.facing_direction = direction
	end
	if self.ground_contact then
		self.velocity.x = max_speed * direction
	else
		self.velocity.x = max_speed * air_acceleration_factor * direction
	end
end

local function jump(self)
	if self.ground_contact and not self.jumped then
		print("jump")
		self.jumped = true
		-- set take-off speed
		self.velocity.y = jump_takeoff_speed
		-- play animation
		play_animation(self, anim_jump)
		self.ground_contact = false
		timer.delay(0.3, false, function() self.jumped = false; abort_jump(self); end)
	end
end


function abort_jump(self)
	-- cut the jump short if we are still going up
	if self.velocity.y > 0 then
		-- scale down the upwards speed
		self.velocity.y = self.velocity.y * 0.5
	end
end

function on_input(self, action_id, action)
	if action_id == input_left then
		walk(self, -action.value)
	elseif action_id == input_right then
		walk(self, action.value)
	end

	if action_id == input_jump and action.pressed then
		print("before jump")
		jump(self)
	end
end