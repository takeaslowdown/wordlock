utf8.rep = string.rep

-- take-off speed when jumping in pixel units
local jump_takeoff_speed = 400
-- these are the tweaks for the mechanics, feel free to change them for a different feeling
-- acceleration factor to use when air-borne
local air_acceleration_factor = 0.8
-- max speed right/left
local max_speed = 450
local max_hp = 3
-- gravity pulling the player down in pixel units
local gravity = -200

local msg_contact_point_response = hash("contact_point_response")
local group_obstacle = hash("ground")
local input_left = hash("left")
local input_right = hash("right")
local input_jump = hash("jump")
local anim_walk = hash("walk")
local anim_idle = hash("idle")
local anim_cast = hash("cast")
local anim_jump = hash("jump")
local anim_fall = hash("fall")
local anim_think = hash("think")

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("camera#camera", "acquire_camera_focus")
	msg.post("@render:", "use_camera_projection")

	-- debug
	-- msg.post("/player/bg", "disable")

	self.jump_speed = jump_takeoff_speed
	self.xspeed = max_speed
	self.velocity = vmath.vector3(0, 0, 0)
	self.facing_direction = 1
	self.correction = vmath.vector3()
	self.anim = nil
	self.jumped = false

	self.idle_for = 0
	self.prompt = false
	self.input = ''
	go.property("inputhash", hash(''))
	go.property("hp", 3)
	self.being_attacked = false
	self.hplabel_id = "#hplabel"

	self.dummy_factory = "/player/spells_preload#dummy_spell"
	self.field_factory = "/player/spells_preload#field_spell"
	self.arrow_factory = "/player/spells_preload#fireball_spell"
	self.haste_factory = "/player/spells_preload#haste_spell"
	self.laser_factory = "/player/spells_preload#laser_spell"
	self.barrier_factory = "/player/spells_preload#barrier_spell"
	
	self.spellfactory = self.dummy_factory
	collectionfactory.load(self.spellfactory, function(_, url, result) end)

	msg.post("#inputlabel", "disable")
	msg.post("#tiplabel", "disable")
	msg.post("#tiplabel_casts", "disable")
	self.casts_shown = false

	self.keyboard_sounds = {
		"/player/keys#key1",
		"/player/keys#key2",
		"/player/keys#key3",
		"/player/keys#key4",
		"/player/keys#key5"
	}
	self.current_keyboard_sound_idx = 1
	
end

local function play_animation(self, anim)
	if self.anim ~= anim then
		sprite.play_flipbook("#sprite", anim)
		self.anim = anim
	end
end

local function update_animations(self)
	sprite.set_hflip("#sprite", self.facing_direction < 0)
	if self.prompt then
		play_animation(self, anim_cast)
	elseif self.ground_contact then
		if self.velocity.x == 0 then
			if self.anim ~= anim_idle and self.anim ~= anim_think then
				play_animation(self, anim_idle)
				self.idle_for = 0
			else
				if self.idle_for == 60 then
					play_animation(self, anim_think)
					msg.post("#tiplabel", "enable")
				else
					self.idle_for = self.idle_for + 1
				end
			end
		else
			play_animation(self, anim_walk)
		end
	else
		if self.velocity.y > 0 then
			play_animation(self, anim_jump)
		else
			play_animation(self, anim_fall)
		end
	end
end


function update(self, dt)
	local hplabel = ""
	for i = 1, self.hp do
		if i <= max_hp then
			hplabel = hplabel .. " <3 "
		else
			hplabel = hplabel .. " + "
		end
	end
	label.set_text(self.hplabel_id, hplabel)
end


function fixed_update(self, dt)
	-- apply gravity
	self.velocity.y = self.velocity.y + gravity * dt

	if self.velocity.x ~= 0 or self.velocity.y ~= 0 then
		msg.post("#tiplabel", "disable")
	end
	
	-- move player
	local pos = go.get_position()
	pos = pos + self.velocity * dt
	go.set_position(pos)

	-- update animations based on state (ground, air, move and idle)
	update_animations(self)

	-- reset volatile state
	self.correction = vmath.vector3()
	self.ground_contact = false
end

-- https://defold.com/manuals/physics/#resolving-kinematic-collisions
local function handle_obstacle_contact(self, normal, distance)
	if distance > 0 then
		local proj = vmath.project(self.correction, normal * distance)
		if proj < 1 then
			local comp = (distance - distance * proj) * normal
			go.set_position(go.get_position() + comp)
			self.correction = self.correction + comp
		end
	end

	if normal.y > 0.7 then
		self.ground_contact = true
		self.velocity.y = 0
	end
	if normal.y < -0.7 then
		self.velocity.y = 0
	end
end

function on_message(self, message_id, message, sender)
	if message_id == msg_contact_point_response then
		if message.group == group_obstacle then
			handle_obstacle_contact(self, message.normal, message.distance)
		end
	elseif message_id == hash("get_dmg") then
		if not self.being_attacked then
			self.being_attacked = true
			self.hp = self.hp - 1
			timer.delay(0.4, false, function() self.being_attacked = false; end)
		end
	elseif message_id == hash("trigger_response") and message.other_group == hash("level_end") then
		print("выход")
		msg.post("/tutorial#tutorial_gui", "level_completed", { pos = go.get_position() })
		self.velocity.x = 0
		self.hp = 0
		
	end
end

local function walk(self, direction)
	if direction ~= 0 then
		self.facing_direction = direction
	end
	if self.ground_contact then
		self.velocity.x = self.xspeed * direction
	else
		self.velocity.x = self.xspeed * air_acceleration_factor * direction
	end
end

local function abort_jump(self)
	if self.velocity.y > 0 then
		self.velocity.y = self.velocity.y * 0.5
	end
end

local function jump(self)
	if self.ground_contact and not self.jumped then
		self.jumped = true
		self.velocity.y = self.jump_speed
		play_animation(self, anim_jump)
		self.ground_contact = false
		timer.delay(0.3, false, function() self.jumped = false; abort_jump(self); end)
	end
end

local function set_spellfactory(self, spell_prefab)
	self.spellfactory = spell_prefab
end


local function cast(self, casted_word)
	print(casted_word)
	print(collectionfactory.get_status(self.spellfactory))
	self.inputhash = hash(casted_word)
	if casted_word == "поле" then
		set_spellfactory(self, self.field_factory)

		local p = go.get_position(".")
		p.y = p.y + 35
		p.z = -1
		local props = {}
		props[hash("/spell")] = {projectile = 0, dmg = 10.0, follow = true, follow_url = hash("/player/player"), follow_offset = vmath.vector3(0, 55, -1)}
		collectionfactory.create(self.spellfactory, p, vmath.quat(), props, 1.0)
	--                                               vvv debug
	elseif casted_word == "стрела" or casted_word == "b" then
		set_spellfactory(self, self.arrow_factory)

		local p = go.get_position(".")
		p.x = p.x + 25 * self.facing_direction
		p.y = p.y + 45
		p.z = -1
		local props = {}
		props[hash("/spell")] = {projectile = self.facing_direction, dmg = 3.0}
		collectionfactory.create(self.spellfactory, p, vmath.quat(), props, 1.0)
	elseif casted_word == "рывок" then
		set_spellfactory(self, self.haste_factory)

		local p = go.get_position(".")
		local props = {}
		props[hash("/spell")] = {dmg = 0.0, dispose_in = 1.0, follow = true, follow_url = hash("/player/player"), follow_offset = vmath.vector3(0, 145, -1)}
		collectionfactory.create(self.spellfactory, p, vmath.quat(), props, 1.0)

		self.jump_speed = jump_takeoff_speed * 1.25
		self.xspeed = max_speed * 2
		timer.delay(3, false, function() self.jump_speed = jump_takeoff_speed / 1.25; self.xspeed = max_speed / 2; end)
	elseif casted_word == "лазерное испепеление" then
		set_spellfactory(self, self.laser_factory)

		local p = go.get_position(".")
		p.x = p.x + 600 * self.facing_direction
		p.y = p.y + 65
		p.z = -1
		local props = {}
		props[hash("/spell")] = {projectile = self.facing_direction / 1000, dispose_in = 0.7, dmg = 15.0, follow = true, follow_url = hash("/player/player"), follow_offset = vmath.vector3(600 * self.facing_direction, 145, -1)}
		collectionfactory.create(self.spellfactory, p, vmath.quat(), props, 1.0)
	elseif casted_word == "барьер" then
		set_spellfactory(self, self.barrier_factory)

		local p = go.get_position(".")
		local props = {}
		props[hash("/spell")] = {dmg = 0.0, dispose_in = 5.0, follow = true, follow_url = hash("/player/player"), follow_offset = vmath.vector3(0, 60, -1)}
		collectionfactory.create(self.spellfactory, p, vmath.quat(), props, 1.5)

		self.hp = self.hp + 2
		timer.delay(5, false, function() if self.hp > max_hp then self.hp = max_hp; end; end)
	else
		if go.exists("/enemywizard/enemywizard#enemy_wizard") then
			msg.post("/enemywizard/enemywizard#enemy_wizard", "counterspell")
		end
	end
end

local function add_letter(word, letter)
	local _, check_for_rus = utf8.gsub(letter, "[А-Яа-я]", " ", 1)
	if check_for_rus == 0 then
		return word
	end
	return word .. letter
end

local function delete_letter(word)
	return utf8.reverse(utf8.gsub(utf8.reverse(word), "[а-яА-Я]", "", 1))
end

local function fmt_input(input)
	local out = ''
	utf8.gsub(input, ".", function(c)
		out = out .. c .. ' '
	end)

	return out
end

local function play_keyboard_sound(self)
	if self.current_keyboard_sound_idx > #self.keyboard_sounds then
		self.current_keyboard_sound_idx = 1
	end
	sound.play(self.keyboard_sounds[self.current_keyboard_sound_idx])
	self.current_keyboard_sound_idx = self.current_keyboard_sound_idx + 1
end

function on_input(self, action_id, action)
	if self.hp <= 0 then
		return
	end
	
	if self.prompt then
		if action_id == hash("type") then
			self.input = self.input .. action.text
			-- action.text = utf8.sub(action.text, 1, 1)
			-- self.input_word = add_letter(self.input_word, action.text)
			label.set_text("#inputlabel", fmt_input(self.input))
			play_keyboard_sound(self)
		elseif action_id == hash("backspace") and action.repeated then
			local l = string.len(self.input)
			self.input = delete_letter(self.input)
			label.set_text("#inputlabel", fmt_input(self.input))
		elseif action_id == hash("submit") then
			self.prompt = false
			cast(self, self.input)
			label.set_text("#inputlabel", "")
			msg.post("#inputlabel", "disable")
		end
	elseif action_id == input_left then
		walk(self, -action.value)
	elseif action_id == input_right then
		walk(self, action.value)
	elseif action_id == input_jump and action.pressed then
		jump(self)
	elseif action_id == hash("cast") then
		walk(self, 0)
		self.prompt = true
		-- a bit hacky :p
		timer.delay(0.1, false, function() self.input = ''; msg.post("#inputlabel", "enable"); label.set_text("#inputlabel", ""); end)
	elseif action_id == hash("showtip") and action.pressed then
		if self.casts_shown then
			self.casts_shown = false
			msg.post("#tiplabel_casts", "disable")
		else
			self.casts_shown = true
			msg.post("#tiplabel_casts", "enable")
		end
	elseif action_id == hash("escape") then
		msg.post("main:/guis#start", "show_start")
		msg.post("main:/loader#loader", "unload_level")
	end
end